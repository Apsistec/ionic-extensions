[{"__symbolic":"module","version":4,"metadata":{"SelectOverlayContent":{"__symbolic":"class","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Component","line":7,"character":1},"arguments":[{"selector":"ionx-select-overlay","template":"\n        <ion-header *ngIf=\"modalOverlay\">\n            <ion-toolbar>\n                <ion-title>{{title}}</ion-title>\n\n                <ion-buttons slot=\"start\">\n                    <ion-button (click)=\"cancelClicked()\">\n                        <ion-icon name=\"close\" slot=\"icon-only\"></ion-icon>\n                    </ion-button>\n                </ion-buttons>\n\n                <ion-buttons slot=\"end\">\n                    <ion-button (click)=\"okClicked()\">{{\"@co.mmons/js-intl#Done\" | intlMessage}}</ion-button>\n                </ion-buttons>\n\n            </ion-toolbar>\n            <ion-toolbar>\n                <ion-searchbar #searchbar cancelButtonText=\"{{'@co.mmons/js-intl#Cancel' | intlMessage}}\" placeholder=\"{{'@co.mmons/js-intl#Search' | intlMessage}}\" (ionInput)=\"search($event)\"></ion-searchbar>\n            </ion-toolbar>\n        </ion-header>\n        <ion-content [scrollY]=\"modalOverlay\" #content>\n            \n            <div class=\"ionx-select-overlay-spinner\" slot=\"fixed\" *ngIf=\"!checkedOptions\">\n                <ion-spinner></ion-spinner>\n            </div>\n\n            <ion-list *ngIf=\"visibleOptions\" lines=\"full\">\n                \n                <ng-container *ngIf=\"modalOverlay; else popoverOptions\">\n            \n                    <ion-virtual-scroll [items]=\"visibleOptions\" [headerFn]=\"optionDivider.bind(this)\" #virtualScroll>\n                        <ion-item-divider *virtualHeader=\"let option\">\n                            <ion-label>{{option.label}}</ion-label>\n                        </ion-item-divider>\n    \n                        <ion-item detail=\"false\" button=\"true\" #listItem *virtualItem=\"let option\">\n                            <ion-checkbox [(ngModel)]=\"option.checked\" (ngModelChange)=\"optionClicked(option)\" (ionChange)=\"optionChanged(option)\"></ion-checkbox>\n                            <ion-label>\n                                <span *ngIf=\"!label; else customLabel\">{{option.label}}</span>\n                                <ng-template #customLabel>\n                                    <ng-container *ngTemplateOutlet=\"label.templateRef; context: {$implicit: option.value}\"></ng-container>\n                                </ng-template>\n                            </ion-label>\n                        </ion-item>\n                    </ion-virtual-scroll>\n                    \n                </ng-container>\n                \n                <ng-template #popoverOptions>\n                    \n                    <ng-template ngFor [ngForOf]=\"visibleOptions\" let-option>\n                    \n                        <ion-item-divider *ngIf=\"option.divider; else basicOption\">\n                            <ion-label>{{option.label}}</ion-label>\n                        </ion-item-divider>\n                        \n                        <ng-template #basicOption>\n                        \n                            <ion-item detail=\"false\" button=\"true\" #listItem>\n                                <ion-checkbox [(ngModel)]=\"option.checked\" (ngModelChange)=\"optionClicked(option)\" (ionChange)=\"optionChanged(option)\"></ion-checkbox>\n                                <ion-label>\n                                    <span *ngIf=\"!label; else customLabel\">{{option.label}}</span>\n                                    <ng-template #customLabel>\n                                        <ng-container *ngTemplateOutlet=\"label.templateRef; context: {$implicit: option.value}\"></ng-container>\n                                    </ng-template>\n                                </ion-label>\n                            </ion-item>\n                            \n                        </ng-template>\n                    \n                    </ng-template>\n                \n                </ng-template>\n            </ion-list>\n\n        </ion-content>\n    "}]}],"members":{"__ctor__":[{"__symbolic":"constructor","parameterDecorators":[null,null,[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Optional","line":89,"character":88}}],[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Optional","line":89,"character":146}}]],"parameters":[{"__symbolic":"reference","module":"@angular/core","name":"ElementRef","line":89,"character":33,"arguments":[{"__symbolic":"error","message":"Could not resolve type","line":89,"character":44,"context":{"typeName":"HTMLElement"}}]},{"__symbolic":"reference","module":"@co.mmons/angular-intl","name":"IntlService","line":89,"character":74},{"__symbolic":"reference","module":"@ionic/angular","name":"PopoverController","line":89,"character":126},{"__symbolic":"reference","module":"@ionic/angular","name":"ModalController","line":89,"character":182}]}],"overlay":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input","line":92,"character":5}}]}],"scroll":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"ViewChild","line":103,"character":5},"arguments":["virtualScroll",{"read":{"__symbolic":"reference","module":"@angular/core","name":"ElementRef","line":89,"character":33,"arguments":[{"__symbolic":"error","message":"Could not resolve type","line":89,"character":44,"context":{"typeName":"HTMLElement"}}]}}]}]}],"content":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"ViewChild","line":106,"character":5},"arguments":["content",{"read":{"__symbolic":"reference","module":"@angular/core","name":"ElementRef","line":89,"character":33,"arguments":[{"__symbolic":"error","message":"Could not resolve type","line":89,"character":44,"context":{"typeName":"HTMLElement"}}]}}]}]}],"multiple":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input","line":109,"character":5}}]}],"orderable":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input","line":112,"character":5}}]}],"updateValues":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input","line":115,"character":5}}]}],"title":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input","line":118,"character":5}}]}],"searchHandler":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input","line":121,"character":5}}]}],"valueValidator":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input","line":124,"character":5}}]}],"valueComparator":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input","line":127,"character":5}}]}],"label":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input","line":130,"character":5}}]}],"options":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input","line":133,"character":5}}]}],"optionDivider":[{"__symbolic":"method"}],"optionClicked":[{"__symbolic":"method"}],"optionChanged":[{"__symbolic":"method"}],"buildVisibleOptions":[{"__symbolic":"method"}],"initOptions":[{"__symbolic":"method"}],"okClicked":[{"__symbolic":"method"}],"cancelClicked":[{"__symbolic":"method"}],"searchbar":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"ViewChild","line":325,"character":5},"arguments":["searchbar",{"read":{"__symbolic":"reference","module":"@angular/core","name":"ElementRef","line":89,"character":33,"arguments":[{"__symbolic":"error","message":"Could not resolve type","line":89,"character":44,"context":{"typeName":"HTMLElement"}}]}}]}]}],"search":[{"__symbolic":"method"}],"ngOnInit":[{"__symbolic":"method"}],"ngAfterViewInit":[{"__symbolic":"method"}]}}}}]