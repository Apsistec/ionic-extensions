[{"__symbolic":"module","version":4,"metadata":{"SelectOverlayContent":{"__symbolic":"class","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Component","line":7,"character":1},"arguments":[{"selector":"ionx-select-overlay","template":"\n        <ion-header *ngIf=\"modalOverlay\">\n            <ion-toolbar>\n                <ion-title>{{title}}</ion-title>\n\n                <ion-buttons slot=\"start\">\n                    <ion-button (click)=\"cancelClicked()\">\n                        <ion-icon name=\"close\" slot=\"icon-only\"></ion-icon>\n                    </ion-button>\n                </ion-buttons>\n\n                <ion-buttons slot=\"end\">\n                    <ion-button (click)=\"okClicked()\">{{\"@co.mmons/js-intl#Done\" | intlMessage}}</ion-button>\n                </ion-buttons>\n\n            </ion-toolbar>\n            <ion-toolbar>\n                <ion-searchbar #searchbar cancelButtonText=\"{{'@co.mmons/js-intl#Cancel' | intlMessage}}\" placeholder=\"{{'@co.mmons/js-intl#Search' | intlMessage}}\" (ionInput)=\"search($event)\"></ion-searchbar>\n            </ion-toolbar>\n        </ion-header>\n        <ion-content [scrollY]=\"modalOverlay\">\n            \n            <div class=\"ionx-select-overlay-spinner\" slot=\"fixed\" *ngIf=\"!optionsChecked\">\n                <ion-spinner></ion-spinner>\n            </div>\n\n            <div *ngIf=\"optionsChecked\">\n\n                <ion-reorder-group #self (ionItemReorder)=\"reordered(self)\" *ngIf=\"ordered && optionsChecked && multiple && optionsChecked.length && visibleCheckedOptionsCount\" [disabled]=\"false\">\n                    <ng-template ngFor [ngForOf]=\"optionsChecked\" let-option>\n                        <ion-item *ngIf=\"!option.hidden\" #listItem>\n                            <ion-checkbox [(ngModel)]=\"option.checked\" (ionChange)=\"optionChanged(option)\" (click)=\"optionClicked(option)\"></ion-checkbox>\n                            <ion-label>{{option.label}}</ion-label>\n                            <ion-reorder slot=\"end\"></ion-reorder>\n                        </ion-item>\n                    </ng-template>\n                </ion-reorder-group>\n\n                <ion-item-group *ngIf=\"visibleOptionsCount\">\n                    <ng-template ngFor [ngForOf]=\"options\" let-option>\n                        <ion-item-divider *ngIf=\"md && option.divider && !option.hidden\"><ion-label>{{option.label}}</ion-label></ion-item-divider>\n                        <ion-list-header *ngIf=\"ios && option.divider && !option.hidden\"><ion-label>{{option.label}}</ion-label></ion-list-header>\n                        <ion-item #listItem *ngIf=\"!option.divider && !option.hidden && (!ordered || !option.checked)\" [class.ionx-select-checked]=\"option.checked\">\n                            <ion-checkbox [(ngModel)]=\"option.checked\" (ngModelChange)=\"optionClicked(option)\" (ionChange)=\"optionChanged(option)\"></ion-checkbox>\n                            <ion-label>{{option.label}}</ion-label>\n                        </ion-item>\n                    </ng-template>\n                </ion-item-group>\n\n            </div>\n\n        </ion-content>\n    "}]}],"members":{"__ctor__":[{"__symbolic":"constructor","parameterDecorators":[null,null,null,[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Optional","line":65,"character":104}}],[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Optional","line":65,"character":162}}]],"parameters":[{"__symbolic":"reference","module":"@angular/core","name":"ElementRef","line":65,"character":33,"arguments":[{"__symbolic":"error","message":"Could not resolve type","line":65,"character":44,"context":{"typeName":"HTMLElement"}}]},{"__symbolic":"reference","module":"@ionic/angular","name":"Config","line":65,"character":66},{"__symbolic":"reference","module":"@co.mmons/angular-intl","name":"IntlService","line":65,"character":90},{"__symbolic":"reference","module":"@ionic/angular","name":"PopoverController","line":65,"character":142},{"__symbolic":"reference","module":"@ionic/angular","name":"ModalController","line":65,"character":198}]}],"overlay":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input","line":73,"character":5}}]}],"ordered":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input","line":84,"character":5}}]}],"reordered":[{"__symbolic":"method"}],"items":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"ViewChildren","line":91,"character":5},"arguments":["listItem",{"read":{"__symbolic":"reference","module":"@angular/core","name":"ElementRef","line":65,"character":33,"arguments":[{"__symbolic":"error","message":"Could not resolve type","line":65,"character":44,"context":{"typeName":"HTMLElement"}}]}}]}]}],"multiple":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input","line":94,"character":5}}]}],"updateValues":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input","line":97,"character":5}}]}],"title":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input","line":100,"character":5}}]}],"searchHandler":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input","line":103,"character":5}}]}],"valueValidator":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input","line":106,"character":5}}]}],"valueComparator":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input","line":109,"character":5}}]}],"options":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input","line":112,"character":5}}]}],"optionClicked":[{"__symbolic":"method"}],"optionChanged":[{"__symbolic":"method"}],"recalculateVisibleOptions":[{"__symbolic":"method"}],"okClicked":[{"__symbolic":"method"}],"cancelClicked":[{"__symbolic":"method"}],"searchbar":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"ViewChild","line":269,"character":5},"arguments":["searchbar",{"read":{"__symbolic":"reference","module":"@angular/core","name":"ElementRef","line":65,"character":33,"arguments":[{"__symbolic":"error","message":"Could not resolve type","line":65,"character":44,"context":{"typeName":"HTMLElement"}}]}}]}]}],"search":[{"__symbolic":"method"}],"ngOnInit":[{"__symbolic":"method"}],"ngAfterViewInit":[{"__symbolic":"method"}],"initOptions":[{"__symbolic":"method"}]}}}}]