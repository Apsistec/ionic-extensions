import { removeSelectedNode } from "prosemirror-utils";
export function createYoutubeIframe(id, start) {
    const iframe = document.createElement("iframe");
    iframe.height = "200px";
    iframe.width = "100%";
    iframe.src = `https://www.youtube.com/embed/${id}${start ? "?start=" + start : ""}`;
    iframe.frameBorder = "0";
    iframe.allow = "accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture";
    iframe.allowFullscreen = true;
    return iframe;
}
// https://www.youtube.com/watch?v=m3V7_Ov52sY
export class YoutubeNodeView {
    constructor(node, view, eventManager) {
        this.view = view;
        this.dom = document.createElement("div");
        this.dom.style.position = "relative";
        this.dom.style.overflow = "hidden";
        this.dom.style.height = "200px";
        this.dom.style.marginTop = "16px";
        this.dom.setAttribute("no-blur", "");
        this.dom.appendChild(createYoutubeIframe(node.attrs.id, node.attrs.start));
        const overlay = this.dom.appendChild(document.createElement("div"));
        overlay.style.position = "absolute";
        overlay.style.left = "0px";
        overlay.style.top = "0px";
        overlay.style.width = "100%";
        overlay.style.height = "200px";
        overlay.style.display = "flex";
        overlay.style.justifyContent = "center";
        const button = overlay.appendChild(document.createElement("ion-button"));
        button.classList.add("ionx--interactive");
        button.setAttribute("color", "primary");
        this.deleteUnlisten = eventManager.addEventListener(button, "click", () => this.deleteNode());
        const icon = document.createElement("ion-icon");
        icon.setAttribute("name", "trash");
        icon.slot = "icon-only";
        button.appendChild(icon);
    }
    deleteNode() {
        this.view.dispatch(removeSelectedNode(this.view.state.tr));
    }
    selectNode() {
        this.dom.classList.add("ionx--selected");
    }
    deselectNode() {
        this.dom.classList.remove("ionx--selected");
    }
    update(node) {
        return false;
    }
    destroy() {
        if (this.deleteUnlisten) {
            this.deleteUnlisten();
        }
    }
    stopEvent(event) {
        return false;
    }
    ignoreMutation() {
        return true;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoieW91dHViZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Bjby5tbW9ucy9pb25pYy1leHRlbnNpb25zL2h0bWwtZWRpdG9yLyIsInNvdXJjZXMiOlsicHJvc2VtaXJyb3Ivdmlld3MveW91dHViZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxPQUFPLEVBQUMsa0JBQWtCLEVBQUMsTUFBTSxtQkFBbUIsQ0FBQztBQUdyRCxNQUFNLFVBQVUsbUJBQW1CLENBQUMsRUFBVSxFQUFFLEtBQWM7SUFFMUQsTUFBTSxNQUFNLEdBQUcsUUFBUSxDQUFDLGFBQWEsQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUNoRCxNQUFNLENBQUMsTUFBTSxHQUFHLE9BQU8sQ0FBQztJQUN4QixNQUFNLENBQUMsS0FBSyxHQUFHLE1BQU0sQ0FBQztJQUN0QixNQUFNLENBQUMsR0FBRyxHQUFHLGlDQUFpQyxFQUFFLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQyxTQUFTLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQztJQUNwRixNQUFNLENBQUMsV0FBVyxHQUFHLEdBQUcsQ0FBQztJQUN6QixNQUFNLENBQUMsS0FBSyxHQUFHLHlFQUF5RSxDQUFDO0lBQ3pGLE1BQU0sQ0FBQyxlQUFlLEdBQUcsSUFBSSxDQUFDO0lBRTlCLE9BQU8sTUFBTSxDQUFDO0FBQ2xCLENBQUM7QUFFRCw4Q0FBOEM7QUFDOUMsTUFBTSxPQUFPLGVBQWU7SUFFeEIsWUFBWSxJQUFVLEVBQVksSUFBZ0IsRUFBRSxZQUEwQjtRQUE1QyxTQUFJLEdBQUosSUFBSSxDQUFZO1FBRTlDLElBQUksQ0FBQyxHQUFHLEdBQUcsUUFBUSxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUN6QyxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxRQUFRLEdBQUcsVUFBVSxDQUFDO1FBQ3JDLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLFFBQVEsR0FBRyxRQUFRLENBQUM7UUFDbkMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsTUFBTSxHQUFHLE9BQU8sQ0FBQztRQUNoQyxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxTQUFTLEdBQUcsTUFBTSxDQUFDO1FBQ2xDLElBQUksQ0FBQyxHQUFHLENBQUMsWUFBWSxDQUFDLFNBQVMsRUFBRSxFQUFFLENBQUMsQ0FBQztRQUVyQyxJQUFJLENBQUMsR0FBRyxDQUFDLFdBQVcsQ0FBQyxtQkFBbUIsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEVBQUUsRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7UUFFM0UsTUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxXQUFXLENBQUMsUUFBUSxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO1FBQ3BFLE9BQU8sQ0FBQyxLQUFLLENBQUMsUUFBUSxHQUFHLFVBQVUsQ0FBQztRQUNwQyxPQUFPLENBQUMsS0FBSyxDQUFDLElBQUksR0FBRyxLQUFLLENBQUM7UUFDM0IsT0FBTyxDQUFDLEtBQUssQ0FBQyxHQUFHLEdBQUcsS0FBSyxDQUFDO1FBQzFCLE9BQU8sQ0FBQyxLQUFLLENBQUMsS0FBSyxHQUFHLE1BQU0sQ0FBQztRQUM3QixPQUFPLENBQUMsS0FBSyxDQUFDLE1BQU0sR0FBRyxPQUFPLENBQUM7UUFDL0IsT0FBTyxDQUFDLEtBQUssQ0FBQyxPQUFPLEdBQUcsTUFBTSxDQUFDO1FBQy9CLE9BQU8sQ0FBQyxLQUFLLENBQUMsY0FBYyxHQUFHLFFBQVEsQ0FBQztRQUV4QyxNQUFNLE1BQU0sR0FBRyxPQUFPLENBQUMsV0FBVyxDQUFDLFFBQVEsQ0FBQyxhQUFhLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQztRQUN6RSxNQUFNLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDO1FBQzFDLE1BQU0sQ0FBQyxZQUFZLENBQUMsT0FBTyxFQUFFLFNBQVMsQ0FBQyxDQUFDO1FBQ3hDLElBQUksQ0FBQyxjQUFjLEdBQUcsWUFBWSxDQUFDLGdCQUFnQixDQUFDLE1BQU0sRUFBRSxPQUFPLEVBQUUsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLFVBQVUsRUFBRSxDQUFDLENBQUM7UUFFOUYsTUFBTSxJQUFJLEdBQUcsUUFBUSxDQUFDLGFBQWEsQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUNoRCxJQUFJLENBQUMsWUFBWSxDQUFDLE1BQU0sRUFBRSxPQUFPLENBQUMsQ0FBQztRQUNuQyxJQUFJLENBQUMsSUFBSSxHQUFHLFdBQVcsQ0FBQztRQUN4QixNQUFNLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQzdCLENBQUM7SUFNTyxVQUFVO1FBQ2QsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsa0JBQWtCLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztJQUMvRCxDQUFDO0lBRUQsVUFBVTtRQUNOLElBQUksQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO0lBQzdDLENBQUM7SUFFRCxZQUFZO1FBQ1IsSUFBSSxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLGdCQUFnQixDQUFDLENBQUM7SUFDaEQsQ0FBQztJQUVELE1BQU0sQ0FBQyxJQUFVO1FBQ2IsT0FBTyxLQUFLLENBQUM7SUFDakIsQ0FBQztJQUVELE9BQU87UUFFSCxJQUFJLElBQUksQ0FBQyxjQUFjLEVBQUU7WUFDckIsSUFBSSxDQUFDLGNBQWMsRUFBRSxDQUFDO1NBQ3pCO0lBQ0wsQ0FBQztJQUVELFNBQVMsQ0FBQyxLQUFZO1FBQ2xCLE9BQU8sS0FBSyxDQUFDO0lBQ2pCLENBQUM7SUFFRCxjQUFjO1FBQ1YsT0FBTyxJQUFJLENBQUM7SUFDaEIsQ0FBQztDQUNKIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtFdmVudE1hbmFnZXJ9IGZyb20gXCJAYW5ndWxhci9wbGF0Zm9ybS1icm93c2VyXCI7XG5pbXBvcnQge05vZGV9IGZyb20gXCJwcm9zZW1pcnJvci1tb2RlbFwiO1xuaW1wb3J0IHtyZW1vdmVTZWxlY3RlZE5vZGV9IGZyb20gXCJwcm9zZW1pcnJvci11dGlsc1wiO1xuaW1wb3J0IHtFZGl0b3JWaWV3LCBOb2RlVmlld30gZnJvbSBcInByb3NlbWlycm9yLXZpZXdcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVlvdXR1YmVJZnJhbWUoaWQ6IHN0cmluZywgc3RhcnQ/OiBzdHJpbmcpIHtcblxuICAgIGNvbnN0IGlmcmFtZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpZnJhbWVcIik7XG4gICAgaWZyYW1lLmhlaWdodCA9IFwiMjAwcHhcIjtcbiAgICBpZnJhbWUud2lkdGggPSBcIjEwMCVcIjtcbiAgICBpZnJhbWUuc3JjID0gYGh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL2VtYmVkLyR7aWR9JHtzdGFydCA/IFwiP3N0YXJ0PVwiICsgc3RhcnQgOiBcIlwifWA7XG4gICAgaWZyYW1lLmZyYW1lQm9yZGVyID0gXCIwXCI7XG4gICAgaWZyYW1lLmFsbG93ID0gXCJhY2NlbGVyb21ldGVyOyBhdXRvcGxheTsgZW5jcnlwdGVkLW1lZGlhOyBneXJvc2NvcGU7IHBpY3R1cmUtaW4tcGljdHVyZVwiO1xuICAgIGlmcmFtZS5hbGxvd0Z1bGxzY3JlZW4gPSB0cnVlO1xuXG4gICAgcmV0dXJuIGlmcmFtZTtcbn1cblxuLy8gaHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj1tM1Y3X092NTJzWVxuZXhwb3J0IGNsYXNzIFlvdXR1YmVOb2RlVmlldyBpbXBsZW1lbnRzIE5vZGVWaWV3IHtcblxuICAgIGNvbnN0cnVjdG9yKG5vZGU6IE5vZGUsIHByb3RlY3RlZCB2aWV3OiBFZGl0b3JWaWV3LCBldmVudE1hbmFnZXI6IEV2ZW50TWFuYWdlcikge1xuXG4gICAgICAgIHRoaXMuZG9tID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICAgICAgdGhpcy5kb20uc3R5bGUucG9zaXRpb24gPSBcInJlbGF0aXZlXCI7XG4gICAgICAgIHRoaXMuZG9tLnN0eWxlLm92ZXJmbG93ID0gXCJoaWRkZW5cIjtcbiAgICAgICAgdGhpcy5kb20uc3R5bGUuaGVpZ2h0ID0gXCIyMDBweFwiO1xuICAgICAgICB0aGlzLmRvbS5zdHlsZS5tYXJnaW5Ub3AgPSBcIjE2cHhcIjtcbiAgICAgICAgdGhpcy5kb20uc2V0QXR0cmlidXRlKFwibm8tYmx1clwiLCBcIlwiKTtcblxuICAgICAgICB0aGlzLmRvbS5hcHBlbmRDaGlsZChjcmVhdGVZb3V0dWJlSWZyYW1lKG5vZGUuYXR0cnMuaWQsIG5vZGUuYXR0cnMuc3RhcnQpKTtcblxuICAgICAgICBjb25zdCBvdmVybGF5ID0gdGhpcy5kb20uYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKSk7XG4gICAgICAgIG92ZXJsYXkuc3R5bGUucG9zaXRpb24gPSBcImFic29sdXRlXCI7XG4gICAgICAgIG92ZXJsYXkuc3R5bGUubGVmdCA9IFwiMHB4XCI7XG4gICAgICAgIG92ZXJsYXkuc3R5bGUudG9wID0gXCIwcHhcIjtcbiAgICAgICAgb3ZlcmxheS5zdHlsZS53aWR0aCA9IFwiMTAwJVwiO1xuICAgICAgICBvdmVybGF5LnN0eWxlLmhlaWdodCA9IFwiMjAwcHhcIjtcbiAgICAgICAgb3ZlcmxheS5zdHlsZS5kaXNwbGF5ID0gXCJmbGV4XCI7XG4gICAgICAgIG92ZXJsYXkuc3R5bGUuanVzdGlmeUNvbnRlbnQgPSBcImNlbnRlclwiO1xuXG4gICAgICAgIGNvbnN0IGJ1dHRvbiA9IG92ZXJsYXkuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImlvbi1idXR0b25cIikpO1xuICAgICAgICBidXR0b24uY2xhc3NMaXN0LmFkZChcImlvbngtLWludGVyYWN0aXZlXCIpO1xuICAgICAgICBidXR0b24uc2V0QXR0cmlidXRlKFwiY29sb3JcIiwgXCJwcmltYXJ5XCIpO1xuICAgICAgICB0aGlzLmRlbGV0ZVVubGlzdGVuID0gZXZlbnRNYW5hZ2VyLmFkZEV2ZW50TGlzdGVuZXIoYnV0dG9uLCBcImNsaWNrXCIsICgpID0+IHRoaXMuZGVsZXRlTm9kZSgpKTtcblxuICAgICAgICBjb25zdCBpY29uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImlvbi1pY29uXCIpO1xuICAgICAgICBpY29uLnNldEF0dHJpYnV0ZShcIm5hbWVcIiwgXCJ0cmFzaFwiKTtcbiAgICAgICAgaWNvbi5zbG90ID0gXCJpY29uLW9ubHlcIjtcbiAgICAgICAgYnV0dG9uLmFwcGVuZENoaWxkKGljb24pO1xuICAgIH1cblxuICAgIHByaXZhdGUgZGVsZXRlVW5saXN0ZW46IEZ1bmN0aW9uO1xuXG4gICAgZG9tOiBIVE1MRWxlbWVudDtcblxuICAgIHByaXZhdGUgZGVsZXRlTm9kZSgpIHtcbiAgICAgICAgdGhpcy52aWV3LmRpc3BhdGNoKHJlbW92ZVNlbGVjdGVkTm9kZSh0aGlzLnZpZXcuc3RhdGUudHIpKTtcbiAgICB9XG5cbiAgICBzZWxlY3ROb2RlKCkge1xuICAgICAgICB0aGlzLmRvbS5jbGFzc0xpc3QuYWRkKFwiaW9ueC0tc2VsZWN0ZWRcIik7XG4gICAgfVxuXG4gICAgZGVzZWxlY3ROb2RlKCkge1xuICAgICAgICB0aGlzLmRvbS5jbGFzc0xpc3QucmVtb3ZlKFwiaW9ueC0tc2VsZWN0ZWRcIik7XG4gICAgfVxuXG4gICAgdXBkYXRlKG5vZGU6IE5vZGUpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIGRlc3Ryb3koKSB7XG5cbiAgICAgICAgaWYgKHRoaXMuZGVsZXRlVW5saXN0ZW4pIHtcbiAgICAgICAgICAgIHRoaXMuZGVsZXRlVW5saXN0ZW4oKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHN0b3BFdmVudChldmVudDogRXZlbnQpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIGlnbm9yZU11dGF0aW9uKCkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG59XG4iXX0=