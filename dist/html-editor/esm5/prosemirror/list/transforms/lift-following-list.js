import { Fragment, NodeRange, Slice } from "prosemirror-model";
import { TextSelection, } from "prosemirror-state";
import { liftTarget, ReplaceAroundStep } from "prosemirror-transform";
function liftListItem(state, selection, tr) {
    var $from = selection.$from, $to = selection.$to;
    var nodeType = state.schema.nodes.listItem;
    var range = $from.blockRange($to, function (node) {
        return !!node.childCount &&
            !!node.firstChild &&
            node.firstChild.type === nodeType;
    });
    if (!range ||
        range.depth < 2 ||
        $from.node(range.depth - 1).type !== nodeType) {
        return tr;
    }
    var end = range.end;
    var endOfList = $to.end(range.depth);
    if (end < endOfList) {
        tr.step(new ReplaceAroundStep(end - 1, endOfList, end, endOfList, new Slice(Fragment.from(nodeType.create(undefined, range.parent.copy())), 1, 0), 1, true));
        range = new NodeRange(tr.doc.resolve($from.pos), tr.doc.resolve(endOfList), range.depth);
    }
    return tr.lift(range, liftTarget(range)).scrollIntoView();
}
export function liftFollowingList(state, from, to, rootListDepth, tr) {
    var listItem = state.schema.nodes.listItem;
    var lifted = false;
    tr.doc.nodesBetween(from, to, function (node, pos) {
        if (!lifted && node.type === listItem && pos > from) {
            lifted = true;
            var listDepth = rootListDepth + 3;
            while (listDepth > rootListDepth + 2) {
                var start = tr.doc.resolve(tr.mapping.map(pos));
                listDepth = start.depth;
                var end = tr.doc.resolve(tr.mapping.map(pos + node.textContent.length));
                var sel = new TextSelection(start, end);
                tr = liftListItem(state, sel, tr);
            }
        }
    });
    return tr;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGlmdC1mb2xsb3dpbmctbGlzdC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Bjby5tbW9ucy9pb25pYy1leHRlbnNpb25zL2h0bWwtZWRpdG9yLyIsInNvdXJjZXMiOlsicHJvc2VtaXJyb3IvbGlzdC90cmFuc2Zvcm1zL2xpZnQtZm9sbG93aW5nLWxpc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFDLFFBQVEsRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFDLE1BQU0sbUJBQW1CLENBQUM7QUFDN0QsT0FBTyxFQUF5QixhQUFhLEdBQWUsTUFBTSxtQkFBbUIsQ0FBQztBQUN0RixPQUFPLEVBQUMsVUFBVSxFQUFFLGlCQUFpQixFQUFDLE1BQU0sdUJBQXVCLENBQUM7QUFFcEUsU0FBUyxZQUFZLENBQ2pCLEtBQWtCLEVBQ2xCLFNBQW9CLEVBQ3BCLEVBQWU7SUFFUCxJQUFBLHVCQUFLLEVBQUUsbUJBQUcsQ0FBZTtJQUNqQyxJQUFNLFFBQVEsR0FBRyxLQUFLLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUM7SUFDN0MsSUFBSSxLQUFLLEdBQUcsS0FBSyxDQUFDLFVBQVUsQ0FDeEIsR0FBRyxFQUNILFVBQUEsSUFBSTtRQUNBLE9BQUEsQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFVO1lBQ2pCLENBQUMsQ0FBQyxJQUFJLENBQUMsVUFBVTtZQUNqQixJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksS0FBSyxRQUFRO0lBRmpDLENBRWlDLENBQ3hDLENBQUM7SUFDRixJQUNJLENBQUMsS0FBSztRQUNOLEtBQUssQ0FBQyxLQUFLLEdBQUcsQ0FBQztRQUNmLEtBQUssQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUMsQ0FBQyxJQUFJLEtBQUssUUFBUSxFQUMvQztRQUNFLE9BQU8sRUFBRSxDQUFDO0tBQ2I7SUFDRCxJQUFNLEdBQUcsR0FBRyxLQUFLLENBQUMsR0FBRyxDQUFDO0lBQ3RCLElBQU0sU0FBUyxHQUFHLEdBQUcsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ3ZDLElBQUksR0FBRyxHQUFHLFNBQVMsRUFBRTtRQUNqQixFQUFFLENBQUMsSUFBSSxDQUNILElBQUksaUJBQWlCLENBQ2pCLEdBQUcsR0FBRyxDQUFDLEVBQ1AsU0FBUyxFQUNULEdBQUcsRUFDSCxTQUFTLEVBQ1QsSUFBSSxLQUFLLENBQ0wsUUFBUSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLFNBQVMsRUFBRSxLQUFLLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsRUFDOUQsQ0FBQyxFQUNELENBQUMsQ0FDSixFQUNELENBQUMsRUFDRCxJQUFJLENBQ1AsQ0FDSixDQUFDO1FBRUYsS0FBSyxHQUFHLElBQUksU0FBUyxDQUNqQixFQUFFLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEVBQ3pCLEVBQUUsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxFQUN6QixLQUFLLENBQUMsS0FBSyxDQUNkLENBQUM7S0FDTDtJQUNELE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsVUFBVSxDQUFDLEtBQUssQ0FBVyxDQUFDLENBQUMsY0FBYyxFQUFFLENBQUM7QUFDeEUsQ0FBQztBQUVELE1BQU0sVUFBVSxpQkFBaUIsQ0FDN0IsS0FBa0IsRUFDbEIsSUFBWSxFQUNaLEVBQVUsRUFDVixhQUFxQixFQUNyQixFQUFlO0lBRVAsSUFBQSxzQ0FBUSxDQUF3QjtJQUN4QyxJQUFJLE1BQU0sR0FBRyxLQUFLLENBQUM7SUFDbkIsRUFBRSxDQUFDLEdBQUcsQ0FBQyxZQUFZLENBQUMsSUFBSSxFQUFFLEVBQUUsRUFBRSxVQUFDLElBQUksRUFBRSxHQUFHO1FBQ3BDLElBQUksQ0FBQyxNQUFNLElBQUksSUFBSSxDQUFDLElBQUksS0FBSyxRQUFRLElBQUksR0FBRyxHQUFHLElBQUksRUFBRTtZQUNqRCxNQUFNLEdBQUcsSUFBSSxDQUFDO1lBQ2QsSUFBSSxTQUFTLEdBQUcsYUFBYSxHQUFHLENBQUMsQ0FBQztZQUNsQyxPQUFPLFNBQVMsR0FBRyxhQUFhLEdBQUcsQ0FBQyxFQUFFO2dCQUNsQyxJQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO2dCQUNsRCxTQUFTLEdBQUcsS0FBSyxDQUFDLEtBQUssQ0FBQztnQkFDeEIsSUFBTSxHQUFHLEdBQUcsRUFBRSxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQ3RCLEVBQUUsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLEdBQUcsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxDQUNoRCxDQUFDO2dCQUNGLElBQU0sR0FBRyxHQUFHLElBQUksYUFBYSxDQUFDLEtBQUssRUFBRSxHQUFHLENBQUMsQ0FBQztnQkFDMUMsRUFBRSxHQUFHLFlBQVksQ0FBQyxLQUFLLEVBQUUsR0FBRyxFQUFFLEVBQUUsQ0FBQyxDQUFDO2FBQ3JDO1NBQ0o7SUFDTCxDQUFDLENBQUMsQ0FBQztJQUNILE9BQU8sRUFBRSxDQUFDO0FBQ2QsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7RnJhZ21lbnQsIE5vZGVSYW5nZSwgU2xpY2V9IGZyb20gXCJwcm9zZW1pcnJvci1tb2RlbFwiO1xuaW1wb3J0IHtFZGl0b3JTdGF0ZSwgU2VsZWN0aW9uLCBUZXh0U2VsZWN0aW9uLCBUcmFuc2FjdGlvbix9IGZyb20gXCJwcm9zZW1pcnJvci1zdGF0ZVwiO1xuaW1wb3J0IHtsaWZ0VGFyZ2V0LCBSZXBsYWNlQXJvdW5kU3RlcH0gZnJvbSBcInByb3NlbWlycm9yLXRyYW5zZm9ybVwiO1xuXG5mdW5jdGlvbiBsaWZ0TGlzdEl0ZW0oXG4gICAgc3RhdGU6IEVkaXRvclN0YXRlLFxuICAgIHNlbGVjdGlvbjogU2VsZWN0aW9uLFxuICAgIHRyOiBUcmFuc2FjdGlvbixcbik6IFRyYW5zYWN0aW9uIHtcbiAgICBjb25zdCB7ICRmcm9tLCAkdG8gfSA9IHNlbGVjdGlvbjtcbiAgICBjb25zdCBub2RlVHlwZSA9IHN0YXRlLnNjaGVtYS5ub2Rlcy5saXN0SXRlbTtcbiAgICBsZXQgcmFuZ2UgPSAkZnJvbS5ibG9ja1JhbmdlKFxuICAgICAgICAkdG8sXG4gICAgICAgIG5vZGUgPT5cbiAgICAgICAgICAgICEhbm9kZS5jaGlsZENvdW50ICYmXG4gICAgICAgICAgICAhIW5vZGUuZmlyc3RDaGlsZCAmJlxuICAgICAgICAgICAgbm9kZS5maXJzdENoaWxkLnR5cGUgPT09IG5vZGVUeXBlLFxuICAgICk7XG4gICAgaWYgKFxuICAgICAgICAhcmFuZ2UgfHxcbiAgICAgICAgcmFuZ2UuZGVwdGggPCAyIHx8XG4gICAgICAgICRmcm9tLm5vZGUocmFuZ2UuZGVwdGggLSAxKS50eXBlICE9PSBub2RlVHlwZVxuICAgICkge1xuICAgICAgICByZXR1cm4gdHI7XG4gICAgfVxuICAgIGNvbnN0IGVuZCA9IHJhbmdlLmVuZDtcbiAgICBjb25zdCBlbmRPZkxpc3QgPSAkdG8uZW5kKHJhbmdlLmRlcHRoKTtcbiAgICBpZiAoZW5kIDwgZW5kT2ZMaXN0KSB7XG4gICAgICAgIHRyLnN0ZXAoXG4gICAgICAgICAgICBuZXcgUmVwbGFjZUFyb3VuZFN0ZXAoXG4gICAgICAgICAgICAgICAgZW5kIC0gMSxcbiAgICAgICAgICAgICAgICBlbmRPZkxpc3QsXG4gICAgICAgICAgICAgICAgZW5kLFxuICAgICAgICAgICAgICAgIGVuZE9mTGlzdCxcbiAgICAgICAgICAgICAgICBuZXcgU2xpY2UoXG4gICAgICAgICAgICAgICAgICAgIEZyYWdtZW50LmZyb20obm9kZVR5cGUuY3JlYXRlKHVuZGVmaW5lZCwgcmFuZ2UucGFyZW50LmNvcHkoKSkpLFxuICAgICAgICAgICAgICAgICAgICAxLFxuICAgICAgICAgICAgICAgICAgICAwLFxuICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgMSxcbiAgICAgICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgKSxcbiAgICAgICAgKTtcblxuICAgICAgICByYW5nZSA9IG5ldyBOb2RlUmFuZ2UoXG4gICAgICAgICAgICB0ci5kb2MucmVzb2x2ZSgkZnJvbS5wb3MpLFxuICAgICAgICAgICAgdHIuZG9jLnJlc29sdmUoZW5kT2ZMaXN0KSxcbiAgICAgICAgICAgIHJhbmdlLmRlcHRoLFxuICAgICAgICApO1xuICAgIH1cbiAgICByZXR1cm4gdHIubGlmdChyYW5nZSwgbGlmdFRhcmdldChyYW5nZSkgYXMgbnVtYmVyKS5zY3JvbGxJbnRvVmlldygpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gbGlmdEZvbGxvd2luZ0xpc3QoXG4gICAgc3RhdGU6IEVkaXRvclN0YXRlLFxuICAgIGZyb206IG51bWJlcixcbiAgICB0bzogbnVtYmVyLFxuICAgIHJvb3RMaXN0RGVwdGg6IG51bWJlcixcbiAgICB0cjogVHJhbnNhY3Rpb24sXG4pOiBUcmFuc2FjdGlvbiB7XG4gICAgY29uc3QgeyBsaXN0SXRlbSB9ID0gc3RhdGUuc2NoZW1hLm5vZGVzO1xuICAgIGxldCBsaWZ0ZWQgPSBmYWxzZTtcbiAgICB0ci5kb2Mubm9kZXNCZXR3ZWVuKGZyb20sIHRvLCAobm9kZSwgcG9zKSA9PiB7XG4gICAgICAgIGlmICghbGlmdGVkICYmIG5vZGUudHlwZSA9PT0gbGlzdEl0ZW0gJiYgcG9zID4gZnJvbSkge1xuICAgICAgICAgICAgbGlmdGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIGxldCBsaXN0RGVwdGggPSByb290TGlzdERlcHRoICsgMztcbiAgICAgICAgICAgIHdoaWxlIChsaXN0RGVwdGggPiByb290TGlzdERlcHRoICsgMikge1xuICAgICAgICAgICAgICAgIGNvbnN0IHN0YXJ0ID0gdHIuZG9jLnJlc29sdmUodHIubWFwcGluZy5tYXAocG9zKSk7XG4gICAgICAgICAgICAgICAgbGlzdERlcHRoID0gc3RhcnQuZGVwdGg7XG4gICAgICAgICAgICAgICAgY29uc3QgZW5kID0gdHIuZG9jLnJlc29sdmUoXG4gICAgICAgICAgICAgICAgICAgIHRyLm1hcHBpbmcubWFwKHBvcyArIG5vZGUudGV4dENvbnRlbnQubGVuZ3RoKSxcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIGNvbnN0IHNlbCA9IG5ldyBUZXh0U2VsZWN0aW9uKHN0YXJ0LCBlbmQpO1xuICAgICAgICAgICAgICAgIHRyID0gbGlmdExpc3RJdGVtKHN0YXRlLCBzZWwsIHRyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiB0cjtcbn1cbiJdfQ==