export function findScrollParent(element) {
    if (!element) {
        return;
    }
    if (element.scrollHeight >= element.clientHeight) {
        var overflowY = window.getComputedStyle(element).overflowY;
        if (overflowY !== "visible" && overflowY !== "hidden") {
            return element;
        }
    }
    if (element.assignedSlot) {
        var p = findScrollParent(element.assignedSlot.parentElement);
        if (p) {
            return p;
        }
    }
    return findScrollParent(element.parentElement);
}
export function scrollIntoView(element, parent) {
    if (parent) {
        var parentRect = parent.getBoundingClientRect();
        var rect = element.getBoundingClientRect();
        if (!(rect.top > parentRect.top && rect.top <= parentRect.bottom && rect.bottom < parentRect.height)) {
            var top_1 = element.offsetTop;
            if (element.offsetParent) {
                var offsetParent = element.offsetParent;
                while (offsetParent !== parent && !!offsetParent) {
                    top_1 += offsetParent.offsetTop;
                    offsetParent = offsetParent.offsetParent;
                }
            }
            parent.scrollTo({ top: top_1 - 100 });
        }
        return;
    }
    element.scrollIntoView();
}
export function scrollToCaret(parent) {
    if (parent) {
        var parentRect = parent.getBoundingClientRect();
        var rect = caretTopPoint();
        if (!(rect.top > parentRect.top && rect.top <= parentRect.bottom)) {
            var top_2 = rect.top - parentRect.top;
            parent.scrollTo({ top: top_2, behavior: "auto" });
        }
        return;
    }
}
export function caretTopPoint() {
    var selection = document.getSelection();
    var range0 = selection.getRangeAt(0);
    var rect;
    var range;
    // supposed to be textNode in most cases
    // but div[contenteditable] when empty
    var node = range0.startContainer;
    var offset = range0.startOffset;
    if (offset > 0) {
        // new range, don't influence DOM state
        range = document.createRange();
        range.setStart(node, (offset - 1));
        range.setEnd(node, offset);
        // https://developer.mozilla.org/en-US/docs/Web/API/range.getBoundingClientRect
        // IE9, Safari?(but look good in Safari 8)
        rect = range.getBoundingClientRect();
        return { left: rect["right"], top: rect.top };
    }
    else if (offset < node["length"]) {
        range = document.createRange();
        // similar but select next on letter
        range.setStart(node, offset);
        range.setEnd(node, (offset + 1));
        rect = range.getBoundingClientRect();
        return { left: rect.left, top: rect.top };
    }
    else {
        // textNode has length
        // https://developer.mozilla.org/en-US/docs/Web/API/Element.getBoundingClientRect
        rect = node.getBoundingClientRect();
        var styles = getComputedStyle(node);
        var lineHeight = parseInt(styles.lineHeight);
        var fontSize = parseInt(styles.fontSize);
        // roughly half the whitespace... but not exactly
        var delta = (lineHeight - fontSize) / 2;
        return { left: rect.left, top: (rect.top + delta) };
    }
}
//# sourceMappingURL=data:application/json;base64,